CreateCollection({
  name: "api-keys",
  history_days: 30,
  ttl_days: null
})

CreateCollection({
  name: "providers",
  history_days: 30,
  ttl_days: null
})

CreateCollection({
  name: "counters",
  history_days: 30,
  ttl_days: null
})

CreateCollection({
  name: "invitation-counters",
  history_days: 30,
  ttl_days: null
})

CreateIndex({
  name: "search_apikey_by_id",
  unique: true,
  serialized: true,
  source: "api-keys",
  terms: [
    {
      field: ["data", "id"]
    }
  ],
  values: [
    {
      field: ["ref"]
    }
  ]
})

CreateIndex({
  name: "search_apikey_by_key",
  unique: true,
  serialized: true,
  source: "api-keys",
  terms: [
    {
      field: ["data", "key"]
    }
  ]
})

CreateIndex({
  name: "search_apikey_by_provider",
  unique: false,
  serialized: true,
  source: "api-keys",
  terms: [
    {
      field: ["data", "providerRef"]
    }
  ],
  values: [
    {
      field: ["ref"]
    },
    {
      field: ["data", "epoch"]
    },
    {
      field: ["data", "coinbase"]
    }
  ]
})

CreateIndex({
  name: "search_apikey_by_provider_epoch_is_free_null_coinbase",
  unique: false,
  serialized: true,
  source: [{
    collection: Collection("api-keys"),
    fields: {
      is_free: Query(
        Lambda(
          "k",
          Equals(Select(["data", "free"], Var("k"), false), true)
        )
      ),
      null_coinbase: Query(
        Lambda(
          "k",
          Equals(Select(["data", "coinbase"], Var("k"), null), null)
        )
      )
    }
  }],
  terms: [
    {
      field: ["data", "providerRef"]
    },
    {
      field: ["data", "epoch"]
    },
    {
      binding: "is_free"
    },
    {
      binding: "null_coinbase"
    }
  ],
  values: [
    {
      field: ["ref"]
    }
  ]
})

CreateIndex({
  name: "get_apikeys_for_proxy",
  unique: false,
  serialized: true,
  source: "api-keys",
  terms: [
    {
      field: ["data", "providerRef"]
    },
    {
      field: ["data", "epoch"]
    }
  ],
  values: [
    {
      field: ["ref"]
    },
    {
      field: ["data", "key"]
    }
  ]
})

CreateIndex({
  name: "counters_by_epoch_and_provider",
  unique: true,
  serialized: true,
  source: "counters",
  terms: [
    {
      field: ["data", "epoch"]
    },
    {
      field: ["data", "providerRef"]
    }
  ],
  values: [
    {
      field: ["ref"]
    }
  ]
})

CreateIndex({
  name: "free_providers_by_epoch",
  unique: false,
  serialized: true,
  source: [{
    collection: Collection("counters"),
    fields: {
      has_free_slots: Query(
        Lambda(
          "k",
          GT(Select(["data", "countFree"], Var("k"), 0), 0)
        )
      )
    }
  }],
  terms: [
    {
      field: ["data", "epoch"]
    },
    {
      binding: "has_free_slots"
    }
  ],
  values: [
    {
      field: ["data", "providerRef"]
    },
    {
      field: ["data", "countFree"]
    },
    {
      field: ["data", "countPaid"]
    }
  ]
})

CreateIndex({
  name: "paid_providers_by_epoch",
  unique: false,
  serialized: true,
  source: [{
    collection: Collection("counters"),
    fields: {
      has_paid_slots: Query(
        Lambda(
          "k",
          GT(Select(["data", "countPaid"], Var("k"), 0), 0)
        )
      ),
    }
  }],
  terms: [
    {
      field: ["data", "epoch"]
    },
    {
      binding: "has_paid_slots"
    }
  ],
  values: [
    {
      field: ["data", "providerRef"]
    },
    {
      field: ["data", "countFree"]
    },
    {
      field: ["data", "countPaid"]
    }
  ]
})

CreateIndex({
  name: "search_apikey_by_coinbase_epoch",
  unique: false,
  serialized: true,
  source: "api-keys",
  terms: [
    {
      field: ["data", "coinbase"]
    },
    {
      field: ["data", "epoch"]
    }
  ],
  values: [
    {
      field: ["ref"]
    }
  ]
})

CreateIndex({
  name: "invitation_counters_by_inviter_epoch",
  unique: true,
  serialized: true,
  source: "invitation-counters",
  terms: [
    {
      field: ["data", "inviter"]
    },
    {
      field: ["data", "epoch"]
    }
  ],
  values: [
    {
      field: ["ref"]
    }
  ]
})

CreateFunction({
  name: "changePaidCounter",
  role: null,
  body: Query(
    Lambda(
      ["epoch", "providerRef", "changeValue"],
      Let(
        {
         counter: Match(
            Index("counters_by_epoch_and_provider"),
            Var("epoch"),
            Var("providerRef")
          )
        },
       If(
          Exists(Var("counter")),
          Let(
            {
              counterRef: Select('ref', Get(Var('counter'))),
              currentCount: Select(["data", "countPaid"], Get(Var("counterRef")))
            },
            Update(Var("counterRef"), {
              data: {
                countPaid: Add(Var("currentCount"), q.Var("changeValue"))
              }
            })
          ),
          Create(Collection('counters'), { data: {
            epoch: Var('epoch'),
            providerRef: Var('providerRef'),
            countPaid: Var("changeValue"),
            countFree: 0
          }})
        )
      )
    )
  )
})

CreateFunction({
  name: "changeFreeCounter",
  role: null,
  body: Query(
    Lambda(
      ["epoch", "providerRef", "changeValue"],
      Let(
        {
         counter: Match(
            Index("counters_by_epoch_and_provider"),
            Var("epoch"),
            Var("providerRef")
          )
        },
       If(
          Exists(Var("counter")),
          Let(
            {
              counterRef: Select('ref', Get(Var('counter'))),
              currentCount: Select(["data", "countFree"], Get(Var("counterRef")))
            },
            Update(Var("counterRef"), {
              data: {
                countFree: Add(Var("currentCount"), Var("changeValue"))
              }
            })
          ),
          Create(Collection('counters'), { data: {
            epoch: Var('epoch'),
            providerRef: Var('providerRef'),
            countPaid: 0,
            countFree: Var("changeValue")
          }})
        )
      )
    )
  )
})

CreateFunction({
  name: "changeInviterCounter",
  role: null,
  body: Query(
    Lambda(
      ["epoch", "inviter", "changeValue"],
      Let(
        {
         counter: Match(
            Index("invitation_counters_by_inviter_epoch"),
            Var("inviter"),
            Var("epoch")
          )
        },
       If(
          Exists(Var("counter")),
          Let(
            {
              counterRef: Select('ref', Get(Var('counter'))),
              currentCount: Select(["data", "count"], Get(Var("counterRef")))
            },
            Update(Var("counterRef"), {
              data: {
                count: Add(Var("currentCount"), Var("changeValue"))
              }
            })
          ),
          Create(Collection('invitation-counters'), { data: {
            epoch: Var('epoch'),
            inviter: Var('inviter'),
            count: Var("changeValue")
          }})
        )
      )
    )
  )
})

